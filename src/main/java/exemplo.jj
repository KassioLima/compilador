//CÓDIGO ORIGINAL: https://javacc.github.io/javacc/tutorials/examples.html#javacc-example-3
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}


PARSER_BEGIN(Exemplo)

public class Exemplo {
    //Aqui começam as alterações do código original

    /**
    * Criamos a variavel "traducao" como uma String vazia para que ela,
    * ao decorrer da execução do código, armazene a tradução da entrada
    */
    static String traducao = "";
    public static void main(String args[]) throws ParseException {
        Exemplo parser = new Exemplo(System.in);
        System.out.print("\nEnter Expression: ");
        parser.texto();
    }
}
PARSER_END(Exemplo)

/**
* No código original, a quebra de linha eo espaço são considerados elements ignoraveis.
* Removemos o "\n" e o espaço em branco da lista de elementos ignoraveis "skip".
*/
SKIP :
{
    "\r" | "\t"
}

/**
* O exemplo foi construído para reconhecer apenas dois tokens: "{" e "}".
* Alteramos para que reconheça os correspondentes em morse dos números de
* 0 a 9 e letras de A a Z, bem como espaçamento e quebra de linha.
*/
TOKEN :
{
    <A:".-">|
    <B:"-...">|
    <C:"-.-.">|
    <D:"-..">|
    <E:".">|
    <F:"..-.">|
    <G:"--.">|
    <H:"....">|
    <I:"..">|
    <J:".---">|
    <K:"-.-">|
    <L:".-..">|
    <M:"--">|
    <N:"-.">|
    <O:"---">|
    <P:".--.">|
    <Q:"--.-">|
    <R:".-.">|
    <S:"...">|
    <T:"-">|
    <U:"..-">|
    <V:"...-">|
    <W:".--">|
    <X:"-..-">|
    <Y:"-.--">|
    <Z:"--..">|
    <N1:".----">|
    <N2:"..---">|
    <N3:"...--">|
    <N4:"....-">|
    <N5:".....">|
    <N6:"-....">|
    <N7:"--...">|
    <N8:"---..">|
    <N9:"----.">|
    <N0:"-----">|
    <espaco: " ">|
    <EOL: "\n">
}
/**
* Alteramos a gramática para reconhecer caracteres e palavras, que compõem um texto
*/
void texto():
{}
{
   ((<espaco><espaco><espaco>)?palavra()(<espaco><espaco><espaco>)?)+ <EOL> {System.out.println("Traducao: " + traducao);}
}
void palavra():
{}
{
    ((<espaco>)?caractere()(<espaco>)?)+
}
void caractere():
{}
{
     <A> {traducao += "A";}
    |<B> {traducao += "B";}
    |<C> {traducao += "C";}
    |<D> {traducao += "D";}
    |<E> {traducao += "E";}
    |<F> {traducao += "F";}
    |<G> {traducao += "G";}
    |<H> {traducao += "H";}
    |<I> {traducao += "I";}
    |<J> {traducao += "J";}
    |<K> {traducao += "K";}
    |<L> {traducao += "L";}
    |<M> {traducao += "M";}
    |<N> {traducao += "N";}
    |<O> {traducao += "O";}
    |<P> {traducao += "P";}
    |<Q> {traducao += "Q";}
    |<R> {traducao += "R";}
    |<S> {traducao += "S";}
    |<T> {traducao += "T";}
    |<U> {traducao += "U";}
    |<V> {traducao += "V";}
    |<W> {traducao += "W";}
    |<X> {traducao += "X";}
    |<Y> {traducao += "Y";}
    |<Z> {traducao += "Z";}
    |<N1> {traducao += "1";}
    |<N2> {traducao += "2";}
    |<N3> {traducao += "3";}
    |<N4> {traducao += "4";}
    |<N5> {traducao += "5";}
    |<N6> {traducao += "6";}
    |<N7> {traducao += "7";}
    |<N8> {traducao += "8";}
    |<N9> {traducao += "9";}
    |<N0> {traducao += "0";}
    |<espaco> {traducao += " ";}
}